from redis.client import Redis as Redis
from redis.commands import SentinelCommands as SentinelCommands
from redis.connection import Connection as Connection, ConnectionPool as ConnectionPool, SSLConnection as SSLConnection
from redis.exceptions import (
    ConnectionError as ConnectionError,
    ReadOnlyError as ReadOnlyError,
    ResponseError as ResponseError,
    TimeoutError as TimeoutError,
)
from redis.utils import str_if_bytes as str_if_bytes
from typing import Any

class MasterNotFoundError(ConnectionError): ...
class SlaveNotFoundError(ConnectionError): ...

class SentinelManagedConnection(Connection):
    connection_pool: Any
    def __init__(self, **kwargs) -> None: ...
    def connect_to(self, address) -> None: ...
    def connect(self): ...
    def read_response(self): ...

class SentinelManagedSSLConnection(SentinelManagedConnection, SSLConnection): ...

class SentinelConnectionPool(ConnectionPool):
    is_master: Any
    check_connection: Any
    service_name: Any
    sentinel_manager: Any
    def __init__(self, service_name, sentinel_manager, **kwargs) -> None: ...
    master_address: Any
    slave_rr_counter: Any
    def reset(self) -> None: ...
    def owns_connection(self, connection): ...
    def get_master_address(self): ...
    def rotate_slaves(self) -> None: ...

class Sentinel(SentinelCommands):
    sentinel_kwargs: Any
    sentinels: Any
    min_other_sentinels: Any
    connection_kwargs: Any
    def __init__(
        self, sentinels, min_other_sentinels: int = ..., sentinel_kwargs: Any | None = ..., **connection_kwargs
    ) -> None: ...
    def execute_command(self, *args, **kwargs): ...
    def check_master_state(self, state, service_name): ...
    def discover_master(self, service_name): ...
    def filter_slaves(self, slaves): ...
    def discover_slaves(self, service_name): ...
    def master_for(self, service_name, redis_class=..., connection_pool_class=..., **kwargs): ...
    def slave_for(self, service_name, redis_class=..., connection_pool_class=..., **kwargs): ...
