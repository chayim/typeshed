from typing import Any

def tags(*t): ...
def between(a, b, inclusive_min: bool = ..., inclusive_max: bool = ...): ...
def equal(n): ...
def lt(n): ...
def le(n): ...
def gt(n): ...
def ge(n): ...
def geo(lat, lon, radius, unit: str = ...): ...

class Value:
    @property
    def combinable(self): ...
    @staticmethod
    def make_value(v): ...
    def to_string(self) -> None: ...

class RangeValue(Value):
    combinable: bool
    range: Any
    inclusive_min: Any
    inclusive_max: Any
    def __init__(self, a, b, inclusive_min: bool = ..., inclusive_max: bool = ...) -> None: ...
    def to_string(self): ...

class ScalarValue(Value):
    combinable: bool
    v: Any
    def __init__(self, v) -> None: ...
    def to_string(self): ...

class TagValue(Value):
    combinable: bool
    tags: Any
    def __init__(self, *tags) -> None: ...
    def to_string(self): ...

class GeoValue(Value):
    lon: Any
    lat: Any
    radius: Any
    unit: Any
    def __init__(self, lon, lat, radius, unit: str = ...) -> None: ...

class Node:
    params: Any
    def __init__(self, *children, **kwparams) -> None: ...
    def join_fields(self, key, vals): ...
    @classmethod
    def to_node(cls, obj): ...
    @property
    def JOINSTR(self) -> None: ...
    def to_string(self, with_parens: Any | None = ...): ...

class BaseNode(Node):
    s: Any
    def __init__(self, s) -> None: ...
    def to_string(self, with_parens: Any | None = ...): ...

class IntersectNode(Node):
    JOINSTR: str

class UnionNode(Node):
    JOINSTR: str

class DisjunctNode(IntersectNode):
    def to_string(self, with_parens: Any | None = ...): ...

class DistjunctUnion(DisjunctNode):
    JOINSTR: str

class OptionalNode(IntersectNode):
    def to_string(self, with_parens: Any | None = ...): ...

def intersect(*args, **kwargs): ...
def union(*args, **kwargs): ...
def disjunct(*args, **kwargs): ...
def disjunct_union(*args, **kwargs): ...
def querystring(*args, **kwargs): ...
