from redis.exceptions import LockError as LockError, LockNotOwnedError as LockNotOwnedError
from typing import Any

class Lock:
    lua_release: Any
    lua_extend: Any
    lua_reacquire: Any
    LUA_RELEASE_SCRIPT: str
    LUA_EXTEND_SCRIPT: str
    LUA_REACQUIRE_SCRIPT: str
    redis: Any
    name: Any
    timeout: Any
    sleep: Any
    blocking: Any
    blocking_timeout: Any
    thread_local: Any
    local: Any
    def __init__(
        self,
        redis,
        name,
        timeout: Any | None = ...,
        sleep: float = ...,
        blocking: bool = ...,
        blocking_timeout: Any | None = ...,
        thread_local: bool = ...,
    ) -> None: ...
    def register_scripts(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    def acquire(self, blocking: Any | None = ..., blocking_timeout: Any | None = ..., token: Any | None = ...): ...
    def do_acquire(self, token): ...
    def locked(self): ...
    def owned(self): ...
    def release(self) -> None: ...
    def do_release(self, expected_token) -> None: ...
    def extend(self, additional_time, replace_ttl: bool = ...): ...
    def do_extend(self, additional_time, replace_ttl): ...
    def reacquire(self): ...
    def do_reacquire(self): ...
